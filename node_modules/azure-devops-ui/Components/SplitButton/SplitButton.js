import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./SplitButton.css";
import * as React from "react";
import { Button } from '../../Button';
import { Expandable } from '../../Expandable';
import { FocusZone, FocusZoneContext } from '../../FocusZone';
import { ContextualMenu } from '../../Menu';
import * as Resources from '../../Resources.Widgets';
import { css } from '../../Util';
export var SplitButton = function (props) {
    var anchor = React.createRef();
    var expandableRef = React.useRef(null);
    var renderCallout = function () {
        return (React.createElement(ContextualMenu, { anchorElement: anchor.current, anchorOrigin: { horizontal: "end" /* end */, vertical: "end" /* end */ }, menuOrigin: { horizontal: "end" /* end */, vertical: "start" /* start */ }, menuProps: props.menuButtonProps.contextualMenuProps.menuProps, onActivate: function (menuItem, event) {
                var contextualMenuProps = props.menuButtonProps.contextualMenuProps;
                if (contextualMenuProps.onActivate) {
                    contextualMenuProps.onActivate(menuItem, event);
                }
                expandableRef.current && expandableRef.current.collapse();
            }, onDismiss: function () { return expandableRef.current && expandableRef.current.collapse(); } }));
    };
    return (React.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
        var button = (React.createElement("div", { className: css(props.className, "bolt-split-button flex-stretch inline-flex-row"), ref: anchor },
            React.createElement(Button, tslib_1.__assign({}, props.buttonProps, { className: css("bolt-split-button-main", props.buttonProps.className), disabled: props.disabled || props.buttonProps.disabled, focusZoneId: zoneContext.direction === 2 /* Vertical */ ? zoneContext.focuszoneId : undefined, primary: props.primary, subtle: props.subtle })),
            React.createElement("div", { className: css("bolt-split-button-divider flex-noshrink", props.primary && "primary", props.disabled && "disabled") }),
            React.createElement(Expandable, { ref: expandableRef, renderCallout: renderCallout, disabled: props.disabled }, function (expandableProps) {
                return (React.createElement("div", { className: "inline-flex-row", onMouseDown: expandableProps.onMouseDown, onKeyDown: expandableProps.onKeyDown },
                    React.createElement(Button, tslib_1.__assign({ ariaLabel: Resources.MoreActions }, props.menuButtonProps, { className: css("bolt-split-button-option flex-self-stretch body-s", props.menuButtonProps.className, expandableProps.expanded && "active"), disabled: props.disabled, iconProps: {
                            iconName: "ChevronDownMed",
                            size: "small" /* small */
                        }, onClick: expandableProps.onClick, primary: props.primary, subtle: props.subtle, text: undefined }))));
            })));
        if (zoneContext.direction !== 1 /* Horizontal */) {
            button = React.createElement(FocusZone, { direction: 1 /* Horizontal */ }, button);
        }
        return button;
    }));
};
