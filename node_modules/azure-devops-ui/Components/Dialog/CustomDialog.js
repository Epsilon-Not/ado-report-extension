import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Dialog.css";
import * as React from "react";
import { ScreenContext } from '../../Core/Util/Screen';
import { Callout } from '../../Callout';
import { Observer } from '../../Observer';
import { Surface, SurfaceContext } from '../../Surface';
import { css } from '../../Util';
var CustomDialog = /** @class */ (function (_super) {
    tslib_1.__extends(CustomDialog, _super);
    function CustomDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomDialog.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaDescribedBy = _a.ariaDescribedBy, ariaLabel = _a.ariaLabel, ariaLabelledBy = _a.ariaLabelledBy, blurDismiss = _a.blurDismiss, calloutClassName = _a.calloutClassName, className = _a.className, calloutContentClassName = _a.calloutContentClassName, contentJustification = _a.contentJustification, contentLocation = _a.contentLocation, defaultActiveElement = _a.defaultActiveElement, escDismiss = _a.escDismiss, id = _a.id, lightDismiss = _a.lightDismiss, onDismiss = _a.onDismiss, modal = _a.modal, role = _a.role, _b = _a.contentSize, contentSize = _b === void 0 ? 1 /* Medium */ : _b;
        return (React.createElement(Observer, { size: this.context.size }, function (props) {
            var mobile = props.size === 0 /* xsmall */;
            return (React.createElement(Callout, { ariaDescribedBy: ariaDescribedBy, ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy, blurDismiss: blurDismiss, className: css(calloutClassName, "bolt-dialog-callout", mobile && "flex-row"), contentClassName: css(calloutContentClassName, "bolt-dialog-callout-content relative scroll-auto", mobile && "bolt-dialog-mobile flex-grow"), contentJustification: contentJustification, contentLocation: contentLocation, contentOrientation: 0 /* Column */, contentShadow: true, contentSize: mobile ? undefined : contentSize, escDismiss: escDismiss, focuszoneProps: {
                    circularNavigation: true,
                    defaultActiveElement: defaultActiveElement || ".bolt-dialog-focus-element",
                    focusOnMount: true,
                    handleTabKey: true,
                    includeDefaults: true,
                    postprocessKeyStroke: function (event) {
                        // We want to prevent moving outside the dialog if there are no focusable elements in the dialog.
                        event.which === 9 /* tab */ && event.preventDefault();
                        return 2 /* IgnoreParents */;
                    }
                }, id: id, lightDismiss: lightDismiss, modal: modal, onDismiss: onDismiss, role: role },
                React.createElement(SurfaceContext.Consumer, null, function (surfaceContext) { return (React.createElement(Surface, tslib_1.__assign({}, surfaceContext, { spacing: 1 /* default */ }),
                    React.createElement("div", { className: css(className, "bolt-dialog-root flex-column flex-grow scroll-hidden") },
                        React.createElement("div", { className: "bolt-dialog-focus-element no-outline", tabIndex: -1 }),
                        _this.props.children))); })));
        }));
    };
    CustomDialog.defaultProps = {
        contentJustification: 1 /* Center */,
        contentLocation: 1 /* Center */,
        escDismiss: true,
        lightDismiss: true
    };
    CustomDialog.contextType = ScreenContext;
    return CustomDialog;
}(React.Component));
export { CustomDialog };
