import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./ExpandableTextField.css";
import * as React from "react";
import { Expandable } from '../../Expandable';
import { TextField } from '../../TextField';
import { css } from '../../Util';
var textFieldId = 1;
var ExpandableTextField = /** @class */ (function (_super) {
    tslib_1.__extends(ExpandableTextField, _super);
    function ExpandableTextField(props) {
        var _this = _super.call(this, props) || this;
        _this.textFieldElement = React.createRef();
        _this.expandable = React.createRef();
        _this.collapse = function () {
            if (_this.expandable.current) {
                _this.expandable.current.collapse();
            }
        };
        _this.expand = function () {
            if (_this.expandable.current) {
                _this.expandable.current.expand();
            }
        };
        _this.onBlur = function () {
            if (_this.props.blurDismiss) {
                _this.collapse();
            }
            if (_this.props.onBlur) {
                _this.props.onBlur();
            }
        };
        _this.renderCallout = function () {
            return _this.props.renderCallout(_this, _this.dropdownId, _this.props.anchorElement
                ? _this.props.anchorElement
                : !_this.props.anchorPoint
                    ? _this.containerElement.current
                        ? _this.containerElement.current
                        : undefined
                    : undefined, _this.props.anchorOffset || { horizontal: 0, vertical: 0 }, _this.props.anchorOrigin || { horizontal: "end" /* end */, vertical: "end" /* end */ }, _this.props.anchorPoint, _this.props.dropdownOrigin || { horizontal: "end" /* end */, vertical: "start" /* start */ });
        };
        _this.dropdownId = props.dropdownId || "dropdown-" + textFieldId++;
        _this.containerElement = props.containerRef || React.createRef();
        return _this;
    }
    ExpandableTextField.prototype.render = function () {
        var _this = this;
        return (React.createElement(Expandable, { disabled: this.props.disabled, expandKey: this.props.expandKey, onCollapse: this.props.onCollapse, onExpand: this.props.onExpand, renderCallout: this.renderCallout, ref: this.expandable }, function (expandableProps) {
            return (React.createElement("div", { className: css(_this.props.className, "bolt-expandable-textfield"), onMouseDown: expandableProps.onMouseDown, onKeyDown: expandableProps.onKeyDown, ref: _this.containerElement, role: _this.props.editable ? "combobox" : undefined, "aria-expanded": _this.props.editable ? expandableProps.expanded : undefined },
                React.createElement(TextField, tslib_1.__assign({ ariaHasPopup: "dialog" }, _this.props, { role: _this.props.editable ? "textbox" : undefined, ariaExpanded: !_this.props.editable ? expandableProps.expanded : undefined, ariaControls: expandableProps.expanded ? _this.dropdownId : undefined, className: "", onBlur: _this.onBlur, onClick: expandableProps.onClick, ref: _this.textFieldElement, suffixIconProps: !_this.props.hideDropdownIcon
                        ? {
                            key: "dropdown-icon",
                            className: css("bolt-expandable-textfield-icon icon-right", _this.props.disabled && "disabled"),
                            iconName: "ChevronDownMed",
                            onClick: expandableProps.onClick,
                            size: "small" /* small */
                        }
                        : undefined }))));
        }));
    };
    ExpandableTextField.prototype.focus = function () {
        if (this.textFieldElement.current) {
            this.textFieldElement.current.focus();
        }
    };
    ExpandableTextField.prototype.select = function () {
        if (this.textFieldElement.current) {
            this.textFieldElement.current.select();
        }
    };
    ExpandableTextField.defaultProps = {
        expandKey: [40 /* downArrow */, 13 /* enter */]
    };
    return ExpandableTextField;
}(React.Component));
export { ExpandableTextField };
