import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./TeachingBubble.css";
import * as React from "react";
import { Callout } from '../../Callout';
import { css } from '../../Util';
var CustomTeachingBubble = /** @class */ (function (_super) {
    tslib_1.__extends(CustomTeachingBubble, _super);
    function CustomTeachingBubble(props) {
        var _this = _super.call(this, props) || this;
        _this.dismiss = function () {
            _this.setState({ fadingOut: true });
        };
        _this.onAnimationEnd = function () {
            if (_this.state.fadingOut) {
                _this.props.onDismiss && _this.props.onDismiss();
            }
            else if (_this.state.newPosition) {
                _this.setState({
                    anchorElement: _this.props.anchorElement,
                    anchorOrigin: _this.props.anchorOrigin,
                    children: _this.props.children,
                    cornerPlacement: _this.props.cornerPlacement,
                    newPosition: false
                }, _this.props.onLocationChange);
            }
        };
        _this.getCalloutOrigin = function (anchorOrigin, cornerPlacement) {
            if (anchorOrigin.horizontal === "center" /* center */) {
                cornerPlacement = 1 /* vertical */;
            }
            else if (anchorOrigin.vertical === "center" /* center */) {
                cornerPlacement = 0 /* horizontal */;
            }
            if (cornerPlacement === 0 /* horizontal */) {
                if (anchorOrigin.horizontal === "start" /* start */) {
                    return { horizontal: "end" /* end */, vertical: anchorOrigin.vertical };
                }
                else if (anchorOrigin.horizontal === "end" /* end */) {
                    return { horizontal: "start" /* start */, vertical: anchorOrigin.vertical };
                }
                else {
                    return { horizontal: "center" /* center */, vertical: anchorOrigin.vertical };
                }
            }
            else {
                if (anchorOrigin.vertical === "start" /* start */) {
                    return { horizontal: anchorOrigin.horizontal, vertical: "end" /* end */ };
                }
                else if (anchorOrigin.vertical === "end" /* end */) {
                    return { horizontal: anchorOrigin.horizontal, vertical: "start" /* start */ };
                }
                else {
                    return { horizontal: anchorOrigin.horizontal, vertical: "center" /* center */ };
                }
            }
        };
        _this.getBeakClassName = function (anchorOrigin, calloutOrigin) {
            var classNameHorizontal, classNameVertical;
            if (calloutOrigin.horizontal === "start" /* start */) {
                if (anchorOrigin.horizontal === "end" /* end */) {
                    classNameHorizontal = "left-primary";
                }
                else {
                    classNameHorizontal = "left-secondary";
                }
            }
            else if (calloutOrigin.horizontal === "end" /* end */) {
                if (anchorOrigin.horizontal === "start" /* start */) {
                    classNameHorizontal = "right-primary";
                }
                else {
                    classNameHorizontal = "right-secondary";
                }
            }
            else {
                classNameHorizontal = "center-h";
            }
            if (calloutOrigin.vertical === "start" /* start */) {
                if (anchorOrigin.vertical === "end" /* end */) {
                    classNameVertical = "top-primary";
                }
                else {
                    classNameVertical = "top-secondary";
                }
            }
            else if (calloutOrigin.vertical === "end" /* end */) {
                if (anchorOrigin.vertical === "start" /* start */) {
                    classNameVertical = "bottom-primary";
                }
                else {
                    classNameVertical = "bottom-secondary";
                }
            }
            else {
                classNameVertical = "center-v";
            }
            return css(classNameHorizontal, classNameVertical);
        };
        _this.state = {
            anchorElement: props.anchorElement,
            anchorOrigin: props.anchorOrigin,
            children: props.children,
            cornerPlacement: _this.props.cornerPlacement
        };
        return _this;
    }
    CustomTeachingBubble.getDerivedStateFromProps = function (props, state) {
        if (state.anchorElement !== props.anchorElement ||
            state.anchorOrigin.horizontal !== props.anchorOrigin.horizontal ||
            state.anchorOrigin.vertical !== props.anchorOrigin.vertical) {
            return tslib_1.__assign({}, state, { newPosition: true });
        }
        else {
            return { children: props.children, cornerPlacement: props.cornerPlacement };
        }
    };
    CustomTeachingBubble.prototype.render = function () {
        var _a = this.state, anchorElement = _a.anchorElement, anchorOrigin = _a.anchorOrigin, children = _a.children, _b = _a.cornerPlacement, cornerPlacement = _b === void 0 ? 1 /* vertical */ : _b, fadingOut = _a.fadingOut, newPosition = _a.newPosition;
        var calloutOrigin = this.getCalloutOrigin(anchorOrigin, cornerPlacement);
        return (React.createElement(Callout, { anchorElement: anchorElement, anchorOrigin: anchorOrigin, ariaDescribedBy: this.props.ariaDescribedBy, ariaLabelledBy: this.props.ariaLabeledBy, blurDismiss: this.props.textOnly, calloutOrigin: calloutOrigin, contentClassName: css("bolt-bubble-callout relative", (fadingOut || newPosition) && "fade-out", this.getBeakClassName(anchorOrigin, calloutOrigin)), contentShadow: true, escDismiss: true, fixedLayout: true, focuszoneProps: {
                circularNavigation: true,
                defaultActiveElement: this.props.defaultActiveElement || ".bolt-bubble-focusable-element",
                focusOnMount: true,
                handleTabKey: true,
                includeDefaults: true,
                postprocessKeyStroke: function (event) {
                    // We want to prevent moving outside the bubble if there are no focusable elements in the bubble.
                    event.which === 9 /* tab */ && event.preventDefault();
                    return 2 /* IgnoreParents */;
                }
            }, onAnimationEnd: this.onAnimationEnd, onDismiss: this.dismiss, updateLayout: true, viewportChangeDismiss: false },
            React.createElement("div", { "aria-live": "polite", "aria-relevant": "text", className: "bolt-bubble-container" },
                React.createElement("div", { className: "bolt-bubble-beak depth-8" }),
                React.createElement("div", { className: "bolt-bubble-content relative scroll-hidden" },
                    React.createElement("div", { className: "bolt-bubble-focusable-element no-outline", tabIndex: -1 }),
                    children))));
    };
    return CustomTeachingBubble;
}(React.Component));
export { CustomTeachingBubble };
